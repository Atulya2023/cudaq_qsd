/*******************************************************************************
 * Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                  *
 * All rights reserved.                                                        *
 *                                                                             *
 * This source code and the accompanying materials are made available under    *
 * the terms of the Apache License 2.0 which accompanies this distribution.    *
 ******************************************************************************/

// RUN: nvq++ %cpp_std --enable-mlir %s -o %t && %t | FileCheck %s
// RUN: nvq++ %cpp_std --target quantinuum --emulate %s -o %t && %t %s 2>&1 | FileCheck %s -check-prefix=FAIL

#include <cudaq.h>

CUDAQ_REGISTER_OPERATION(rand1, 3, 0,
    {    -0.3864454171,  0.0898310156,  0.5312328995,  0.5522301694,  0.2917211302,
      0.1002375793,  0.3132788328, -0.2492616247, -0.5631601231, -0.5843011942,
       -0.4196072910,  0.1961775876,  0.0365273624,  0.0296515313, -0.3213434967,
        -0.1463275821, -0.1502641106,  0.3750088492, -0.0174364201,  0.2916555148,
          0.0885375041,  0.3493350151, -0.4652452044,  0.6364708551, -0.0637728587,
            0.4667560595, -0.6657180617,  0.0722340557,  0.1118059819,  0.3361966449,
              0.3501848201, -0.2855089091, -0.2976601415,  0.3624182600, -0.0212715441,
                0.2120453000, -0.7401394729, -0.4177051557, -0.0602559838, -0.0933859583,
                 -0.5032117869,  0.3298250467,  0.1954194848, -0.6617542192,  0.2249647666,
                  -0.0150296919, -0.2552869937, -0.2141948353,  0.4026940166,  0.1813376131,
                    0.0070173811,  0.2685241771,  0.1838678386, -0.1066812210, -0.6177264601,
                     -0.5531956953,  0.0536488740, -0.1378940193,  0.2440210322, -0.1062469128,
                      -0.5108836454,  0.7536084567, -0.0955196807, -0.2630979905})

__qpu__ void kernel() {
  cudaq::qvector q(3);
  x(q);
  rand1(q[0], q[1], q[2]);
}

int main() {
  auto counts = cudaq::sample(kernel);
  for (auto &[bits, count] : counts) {
    printf("%s\n", bits.data());
  }
}

// CHECK: 110

// FAIL: failed to legalize operation 'quake.custom_op'
